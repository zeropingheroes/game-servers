#!/bin/bash

# Abort script on first error
set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source $SCRIPT_DIR/include

# Help
if [ $# == 0 ]; then
    echo "
    Usage:

      game-servers self-install
      game-servers self-update

      game-servers install <game1> [<game2>...]
      game-servers install all

      game-servers update <game1> [<game2>...]
      game-servers update all

      game-servers launch <game> [<launcher>]
      game-servers console <game> [<launcher>]
      game-servers stop <game> [<launcher>]

      game-servers status
    "
    exit
fi

COMMAND=${1,,}

# Commands
case $COMMAND in

    "self-install")
        info "Downloading SteamCMD"
        $SCRIPT_DIR/SteamCMD/download.sh

        if [[ -z "${STEAM_USERNAME// }" ]]; then
            info "Please specify a Steam account which owns the games you wish to host"
            info "Username:"
            read STEAM_USERNAME
            info "Adding Steam username to game-servers/linux/include"
            sed -i "s/STEAM_USERNAME=\"\"/STEAM_USERNAME=\"$STEAM_USERNAME\"/g" $SCRIPT_DIR/include
        fi

        info "Starting SteamCMD"
        $SCRIPT_DIR/SteamCMD/steamcmd.sh +login $STEAM_USERNAME +quit

        info "Installation complete!"
        ;;

    "self-update")
        error "Not yet implemented"
        ;;

    "install")
        # Argument is a single game
        if [ $# == 2 ] && [ $2 != "all" ]; then
            GAME_NAME=$2

            install_game $GAME_NAME $SCRIPT_DIR

        # Argument is "all"
        elif [ $# == 2 ] && [ "$2" == "all" ]; then
            info "Installing all games"

            for GAME_NAME in */ ; do
            if [ "$GAME_NAME" != "SteamCMD" ]; then
                        install_game $GAME_NAME $SCRIPT_DIR
                    fi
            done

        # Argument is a list of games
        elif [ $# -gt 2 ]; then
            for GAME_NAME in "$@"; do
                if [ "$GAME_NAME" != "install" ]; then
                        install_game $GAME_NAME $SCRIPT_DIR
                fi
            done
        fi
        ;;

    "update")
       # Argument is a single game
        if [ $# == 2 ] && [ $2 != "all" ]; then
            GAME_NAME=$2

            update_game $GAME_NAME $SCRIPT_DIR

        # Argument is "all"
        elif [ $# == 2 ] && [ "$2" == "all" ]; then
            info "Updating all games"
            for GAME_NAME in */ ; do
                if [ "$GAME_NAME" != "SteamCMD" ]; then
                    update_game $GAME_NAME $SCRIPT_DIR
                fi
            done

        # Argument is a list of games
        elif [ $# -gt 2 ]; then
            for GAME in "$@"; do
                if [ "$GAME" != "update" ]; then
                    update_game $GAME $SCRIPT_DIR
                fi
            done
        fi
        ;;

    "launch")
        GAME_NAME=${2%/}
        LAUNCHER_NAME=${3:-default}
        if [ -f $SCRIPT_DIR/$GAME_NAME/launchers/$LAUNCHER_NAME.sh ]; then
            if (server_running "$GAME_NAME-$LAUNCHER_NAME"); then
                    error "Server $GAME_NAME-$LAUNCHER_NAME already running"
                exit
            else
                    info "Launching $GAME_NAME server with \"$LAUNCHER_NAME\" launcher"
                        launch "$SCRIPT_DIR/$GAME_NAME/launchers/$LAUNCHER_NAME.sh" "$GAME_NAME" "$LAUNCHER_NAME"
            fi
        else
            error "Launcher \"$LAUNCHER_NAME\" for $GAME_NAME not found"
            exit
        fi
        ;;

    "console")
        GAME_NAME=${2%/}
        LAUNCHER_NAME=${3:-default}
        if ( server_running "$GAME_NAME-$LAUNCHER_NAME"); then
                info "Opening console for $GAME_NAME ($LAUNCHER_NAME) server"
            info "Press ctrl+b and then d to exit the console but leave the server running"
            info "If you press ctrl+c the server will stop!"
            info "Please wait..."
            sleep 2
                console "$GAME_NAME" "$LAUNCHER_NAME"
        else
            error "Server $GAME_NAME-$LAUNCHER_NAME not running"
            exit
        fi
        ;;

    "stop")
        GAME_NAME=${2%/}
        LAUNCHER_NAME=${3:-default}
        if ( server_running "$GAME_NAME-$LAUNCHER_NAME"); then
            info "Stopping $GAME_NAME ($LAUNCHER_NAME) server"
            stop "$GAME_NAME" "$LAUNCHER_NAME"
        else
            error "Server $GAME_NAME-$LAUNCHER_NAME not running"
            exit
        fi
        ;;

        "status")
        list_servers
        exit
        ;;

    *)
        error "Unknown command: $COMMAND"
        exit

        ;;
esac

